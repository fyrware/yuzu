"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Theme = void 0;
const color_1 = __importDefault(require("color"));
const cortex_1 = require("cortex");
class Theme extends cortex_1.Context {
    constructor() {
        super(...arguments);
        this.value = Theme.Default;
    }
}
exports.Theme = Theme;
(function (Theme) {
    class Color {
        constructor(format, ...values) {
            this.opacity = 1;
            this.format = format;
            this.values = values;
        }
        alpha(percent) {
            return Object.assign(new Color(this.format, ...this.values), { opacity: percent / 100 });
        }
        darken(amount) {
            return new Color(this.format, ...color_1.default(this.toString()).darken(amount).array());
        }
        lighten(amount) {
            return new Color(this.format, ...color_1.default(this.toString()).lighten(amount).array());
        }
        negate() {
            return new Color(this.format, ...color_1.default(this.toString()).negate().array());
        }
        rotate(amount) {
            return new Color(this.format, ...color_1.default(this.toString()).rotate(amount).array());
        }
        toString() {
            switch (this.format) {
                case Color.Format.HEX:
                    return `#${this.values.map(n => n.toString(16)).join('')}${Math.round(this.opacity * 255).toString(16)}`;
                case Color.Format.HSL:
                    return `hsla(${this.values.join(', ')}, ${this.opacity})`;
                case Color.Format.RGB:
                    return `rgba(${this.values.join(', ')}, ${this.opacity})`;
            }
        }
    }
    Theme.Color = Color;
    (function (Color) {
        let Format;
        (function (Format) {
            Format[Format["HEX"] = 0] = "HEX";
            Format[Format["HSL"] = 1] = "HSL";
            Format[Format["RGB"] = 2] = "RGB";
        })(Format = Color.Format || (Color.Format = {}));
        Color.HEX = Format.HEX;
        Color.HSL = Format.HSL;
        Color.RGB = Format.RGB;
    })(Color = Theme.Color || (Theme.Color = {}));
    class Font {
        constructor(family, size = 1, serif = false) {
            this.family = family;
            this.size = size;
            this.serif = serif;
        }
        resize(size) {
            return new Font(this.family, size, this.serif);
        }
        toString() {
            return `${this.size}rem ${this.family}, ${this.serif ? 'serif' : 'sans-serif'}`;
        }
    }
    Theme.Font = Font;
    class Gradient {
        constructor(angle, steps) {
            this.angle = angle;
            this.steps = steps;
        }
        toString() {
            return `linear-gradient(${this.angle}deg, ${this.steps.map(([color, stop]) => `${color} ${stop * 100}%`)})`;
        }
    }
    Theme.Gradient = Gradient;
    class Shadow {
    }
    Theme.Shadow = Shadow;
    Theme.Default = {
        colors: [
            new Theme.Color(Theme.Color.HEX, 0x000000),
            new Theme.Color(Theme.Color.HEX, 0xFFFFFF)
        ],
        fonts: [
            new Theme.Font('Arial', 1)
        ],
        gradients: [
            new Theme.Gradient(0, [
                [new Theme.Color(Theme.Color.HEX, 0x000000), 0],
                [new Theme.Color(Theme.Color.HEX, 0xFFFFFF), 1],
            ])
        ],
        shadows: []
    };
})(Theme = exports.Theme || (exports.Theme = {}));
//# sourceMappingURL=data:application/json;base64,