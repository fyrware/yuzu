"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Theme = void 0;
const cortex_1 = require("cortex");
class Theme extends cortex_1.Context {
    constructor() {
        super(...arguments);
        this.value = {
            action: {
                critical: new Theme.Color(Theme.Color.HEX, 0xFF0000),
                discover: new Theme.Color(Theme.Color.HEX, 0x0000FF),
                failure: new Theme.Color(Theme.Color.HEX, 0xFF0000),
                success: new Theme.Color(Theme.Color.HEX, 0x00FF00),
                warning: new Theme.Color(Theme.Color.HEX, 0xFF8800)
            },
            common: {
                black: new Theme.Color(Theme.Color.HEX, 0x000000),
                white: new Theme.Color(Theme.Color.HEX, 0xFFFFFF)
            },
            font: {
                family: 'Arial, sans-serif',
                size: 16
            },
            palette: {
                primary: new Theme.Color(Theme.Color.HEX, 0x000000),
                secondary: new Theme.Color(Theme.Color.HEX, 0x000000),
                tertiary: new Theme.Color(Theme.Color.HEX, 0x000000),
                quaternary: new Theme.Color(Theme.Color.HEX, 0x000000)
            }
        };
    }
}
exports.Theme = Theme;
(function (Theme) {
    class Color {
        constructor(format, ...values) {
            this.opacity = 1;
            this.format = format;
            this.values = values;
        }
        alpha(percent) {
            return Object.assign(new Color(this.format, ...this.values), { opacity: percent / 100 });
        }
        toString() {
            switch (this.format) {
                case Color.Format.HEX:
                    return `#${this.values[0].toString(16)}${Math.round(this.opacity * 255).toString(16)}`;
                case Color.Format.HSL:
                    return `hsla(${this.values.join(', ')}, ${this.opacity})`;
                case Color.Format.RGB:
                    return `rgba(${this.values.join(', ')}, ${this.opacity})`;
            }
        }
    }
    Theme.Color = Color;
    (function (Color) {
        let Format;
        (function (Format) {
            Format[Format["HEX"] = 0] = "HEX";
            Format[Format["HSL"] = 1] = "HSL";
            Format[Format["RGB"] = 2] = "RGB";
        })(Format = Color.Format || (Color.Format = {}));
        Color.HEX = Format.HEX;
        Color.HSL = Format.HSL;
        Color.RGB = Format.RGB;
    })(Color = Theme.Color || (Theme.Color = {}));
    let Palette;
    (function (Palette) {
        Palette[Palette["Primary"] = 0] = "Primary";
        Palette[Palette["Secondary"] = 1] = "Secondary";
        Palette[Palette["Tertiary"] = 2] = "Tertiary";
        Palette[Palette["Quaternary"] = 3] = "Quaternary";
    })(Palette = Theme.Palette || (Theme.Palette = {}));
    let Size;
    (function (Size) {
        Size[Size["Small"] = 0] = "Small";
        Size[Size["Medium"] = 1] = "Medium";
        Size[Size["Large"] = 2] = "Large";
    })(Size = Theme.Size || (Theme.Size = {}));
})(Theme = exports.Theme || (exports.Theme = {}));
//# sourceMappingURL=data:application/json;base64,